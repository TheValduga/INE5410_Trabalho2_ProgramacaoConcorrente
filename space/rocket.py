from random import randrange, random
from time import sleep
from threading import Thread, current_thread, Semaphore
import globals


class Rocket:

    ################################################
    # O CONSTRUTOR DA CLASSE N√ÉO PODE SER ALTERADO #
    ################################################
    def __init__(self, type):
        self.id = randrange(1000)
        self.name = type
        if(self.name == 'LION'):
            self.fuel_cargo = 0
            self.uranium_cargo = 0

    def orbit(self, planet):
        '''Seguindo a informa√ß√£o do sat√©lite, se o planeta for inabit√°vel permite a rota de colis√£o.
        Caso contr√°rio, a thread foguete chega ao seu fim ap√≥s printar'''
        
        # Satisfaz a regra que apenas 2 foguetes por vez podem colidir com o planeta
        globals.colision_course.get(planet.name).acquire() 

        # Satisfaz a regra de verificar planet.terraform com a limita√ß√£o da tecnologia
        if planet.satellite_get_info() > 0:  # Se n√£o est√° habit√°vel
            self.nuke(planet) # bombardeia o planeta
        
        # Se planeta for habit√°vel, foguete n√£o colide com o planeta
        else:
            globals.acquire_print()
            print(f"‚ú® - {self.name} ROCKET / ID {self.id}, is indefinitely orbiting {planet.name}.")
            globals.release_print()

    def nuke(self, planet):  # Permitida a altera√ß√£o
        '''# BOOM!!! üéá'''

        # Satisfaz a regra de n√£o haver colis√£o simult√¢nea no mesmo polo
        if globals.pole.get(planet.name).acquire(blocking=False):

            globals.acquire_print()
            print(f"üéá - [EXPLOSION] - The {self.name} ROCKET / ID {self.id}, reached the planet {planet.name} on North Pole!")
            globals.release_print()
            
            planet.planet_takes_damage(self.damage())   # Dano da explos√£o
            globals.pole.get(planet.name).release()

        else:
            globals.acquire_print()
            print(f"üéá - [EXPLOSION] - The {self.name} ROCKET / ID {self.id}, reached the planet {planet.name} on South Pole!")
            globals.release_print()
            planet.planet_takes_damage(self.damage())   # Dano da explos√£o

        # Notifica o condition que impede busy waiting nos planetas
        with globals.nuclear_event_condition.get(planet.name):
            globals.nuclear_event_condition.get(planet.name).notify()

        # colidiu, libera para uma nova colis√£o
        globals.colision_course.get(planet.name).release()
        # colidiu, libera para um novo lan√ßamento
        globals.voyage_to.get(planet.name).release()
        
        # Notifica o condition que impede busy waiting nas bases
        with globals.stop_bases:
            globals.stop_bases.notify_all()

    def voyage(self, planet):  # Permitida a altera√ß√£o (com ressalvas)

        # Essa chamada de c√≥digo (do_we_have_a_problem e simulation_time_voyage) n√£o pode ser retirada.
        # Voc√™ pode inserir c√≥digo antes ou depois dela e deve
        # usar essa fun√ß√£o.

        self.simulation_time_voyage(planet)     # Rocket est√° viajando
        failure = self.do_we_have_a_problem()   # Testa falha
        
        # Foguete entra em √≥rbita do Planeta
        if failure == False:                    # Se n√£o ouve uma falha
            self.orbit(planet)                  # entra em √≥rbita
        
        # Libera para novo lan√ßamento caso o foguete falhe
        else:
            # Impede busywaiting nas bases
            #TODO verificar dps, rever porque √© notify all
            with globals.stop_bases:
                globals.stop_bases.notify_all() 
            globals.voyage_to.get(planet.name).release()
            

    def planning_launch(self):
        '''Retorna o planeta que o foguete deve viajar, retorna falso se nenhum estiver dispon√≠vel'''
        
        # Dicionario com semaforos que contam 100 lan√ßamentos para um planeta simultaneamente
        to_define_destiny_dict = globals.voyage_to 
        
        # Sem√°foros de valor N
        # Se > 0, decrementa, mas n√£o bloqueia
        
        if to_define_destiny_dict.get('IO').acquire(blocking=False): 
            planet = globals.get_planets_ref().get('io')
            return planet

        elif to_define_destiny_dict.get('GANIMEDES').acquire(blocking=False): 
            planet = globals.get_planets_ref().get('ganimedes')
            return planet

        elif to_define_destiny_dict.get('EUROPA').acquire(blocking=False): 
            planet = globals.get_planets_ref().get('europa')
            return planet

        elif to_define_destiny_dict.get('MARS').acquire(blocking=False): 
            planet = globals.get_planets_ref().get('mars')
            return planet
        
        else:
            return False

    def lion_launch(self):
        
        '''Lan√ßamento de lion'''
        
        sleep(0.01)  # Quatro dias para o foguete LION chegar na lua
        lua = globals.get_bases_ref().get('moon')

        lua.fuel += self.fuel_cargo  # Recarrega combust√≠vel da lua
        lua.uranium += self.uranium_cargo  # Recarrega ur√¢nio da lua

        globals.acquire_print()
        print(f"ü¶Å - [LION] - Arrived in MOON üåë base - refueling ‚õΩ {self.fuel_cargo} ‚ò¢ { self.uranium_cargo}")
        globals.release_print()

        with globals.moon_wait:
            globals.moon_wait.notify()  # Da notify para base da lua voltar a trabalhar

        ####################################################
        #                   ATEN√á√ÉO                        #
        #     AS FUN√á√ïES ABAIXO N√ÉO PODEM SER ALTERADAS    #
        ####################################################

    def simulation_time_voyage(self, planet):
        if planet.name == 'MARS':
            # Marte tem uma dist√¢ncia aproximada de dois anos do planeta Terra.
            sleep(2)
        else:
            # IO, Europa e Ganimedes tem uma dist√¢ncia aproximada de cinco anos do planeta Terra.
            sleep(5)

    def do_we_have_a_problem(self):
        if(random() < 0.15):
            if(random() < 0.51):
                self.general_failure()
                return True
            else:
                self.meteor_collision()
                return True
        return False

    def general_failure(self):
        print(f"[GENERAL FAILURE] - {self.name} ROCKET, ID: {self.id}")

    def meteor_collision(self):
        print(f"[METEOR COLLISION] - {self.name} ROCKET, ID: {self.id}")

    def successfull_launch(self, base):
        if random() <= 0.1:
            print(
                f"[LAUNCH FAILED] - {self.name} ROCKET id:{self.id} on {base.name}")
            return False
        return True

    def damage(self):
        return random()

    def launch(self, base, planet):
        '''recebe objeto base e objeto planet'''
        if(self.successfull_launch(base)):
            print(f"üöÄ - [{self.name} - {self.id}] launched from [{base.name}].")
            self.voyage(planet)
        
        # caso falhe o lan√ßamento
        else:
            # Da notify para as bases que est√£o aguardando em stop_bases.wait()
            with globals.stop_bases:
                globals.stop_bases.notify()
            # Da release para liberar novo lan√ßamento para o planeta associado
            globals.voyage_to.get(planet.name).release()
            
